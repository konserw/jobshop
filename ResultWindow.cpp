#include "ResultWindow.h"
#include "ui_ResultWindow.h"
#include "Job.h"
#include "Result.h"
#include "Jobshop.h"
#include <QDebug>
#include <QtWidgets>
#include <QFileDialog>
#include <QtSvg/QSvgGenerator>
#include <QtAlgorithms>
#include <QList>
#include <QFile>
#include <QTextStream>
#include <QProcess>
#include <QTextCodec>
#include <QtDebug>
#include "ResultsModel.h"

int run(const QString &program, const QStringList &args)
{
    int rc;
    qDebug() << "running command: " << program << " args: " << args;
    rc = QProcess::execute(program, args);
    qDebug() << program << " returned code: " << rc;
    return rc;
}

void save(const QString &fileName, const QString &content)
{
    QFile file(fileName);
    file.open(QIODevice::WriteOnly | QIODevice::Text);
    QTextStream ts(&file);
    ts.setCodec(QTextCodec::codecForName("UTF-8"));
    ts << content;
    file.close();
}

ResultWindow::ResultWindow(const Chromosome& chromosome, QWidget *parent) :
    QDialog(parent),
    ui(new Ui::ResultWindow),
    m_chromosome(chromosome)
{
    ui->setupUi(this);

    setWindowModality(Qt::ApplicationModal);

    //Podsumowanie obliczeń
    //Eksport LaTeXu

    //per job stats
    ui->tableView->setModel(new ResultsModel(chromosome.results(), this));
    ui->tableView->resizeColumnsToContents();
    //global stats
    ui->label->setTextFormat(Qt::RichText);
    ui->label->setStyleSheet("QLabel { vertical-align: middle; font-size: 12pt; background-color: white; color: black; }");
    ui->label->setText(QString(
                           "Completion Time = %1<br />\n"
                           "Mean Flow Time = %2<br />\n"
                           "Number of tardy jodbs = %3 <br />\n"
                           "Maximum tardiness = %4<br />\n"
                           "Mean tardiness = %5<br />\n"
                           "<img src=:/w1> %6<br />\n"
                           "<img src=:/w2> %7<br />\n"
                           )
                       .arg(m_chromosome.completionTime())
                       .arg(m_chromosome.meanFlow())
                       .arg(m_chromosome.tardy())
                       .arg(m_chromosome.maxTardy())
                       .arg(m_chromosome.meanTardy())
                       .arg(m_chromosome.valueMean())
                       .arg(m_chromosome.valueAlpha())
                       );

    m_chart = m_chromosome.ganttChart();

    m_scene = new QGraphicsScene(this);
    m_scene->addItem(m_chart);

    ui->graphicsView->setScene(m_scene);
    ui->graphicsView->setAlignment(Qt::AlignLeft | Qt::AlignTop);

    connect(ui->pushButton_latex, &QPushButton::clicked, this, &ResultWindow::latex);
    connect(ui->pushButton_save, &QPushButton::clicked, this, &ResultWindow::saveChart);
}

ResultWindow::~ResultWindow()
{
    delete m_chart;
    delete ui;
}

void ResultWindow::changeEvent(QEvent *e)
{
    QDialog::changeEvent(e);
    switch (e->type()) {
    case QEvent::LanguageChange:
        ui->retranslateUi(this);
        break;
    default:
        break;
    }
}

/*
void ResultWindow::pdf()
{
    QString fileName;
    fileName = QFileDialog::getSaveFileName(this, tr("Export wyników do pliku PDF"), "", tr("Plik PDF (*.pdf)"));
    if(fileName.isEmpty())return;

    this->pdf(fileName);
}

void ResultWindow::pdf(const QString &fileName)
{
    const QString texFile("output/wrapped.tex");

    this->latex("output/temp.tex");

    QString s;
    s =     "\\documentclass[11pt,a4paper]{article}\n"
            "\\usepackage{polski}\n" //[babel]
            "\\usepackage[utf8]{inputenc}\n"
            "\\usepackage{mathtools}\n"
            "\\usepackage{color}\n"
            "\\usepackage{graphicx}\n"
            "\\usepackage{lscape}\n"
            "\\usepackage{transparent}\n"
            "\\mathtoolsset{showonlyrefs}\n"
            "\\title{Generated by kSzereg}\n"
            "\\date{}\n"
            "\\begin{document}\n"
            "\t\\input{";
    s +=    "temp.tex";
    s +=    "}\n"
            "\\end{document}\n";

    save(texFile, s);

    QStringList args;
    args << "--pdf" << "--inplace" << "-I" << "output" << texFile;
    run("rubber", args);

    args.clear();
    args << "--clean" << "--inplace" << texFile;
    run("rubber", args);

    QDir::current().rename("output/wrapped.pdf", fileName);
}
*/
void ResultWindow::latex()
{
    QString fileName;
    fileName = QFileDialog::getSaveFileName(this, tr("Export wyników do LaTeXu"), "", tr("Plik tex (*.tex)"));
    if(fileName.isEmpty())return;
    this->latex2(fileName);
}

void ResultWindow::latex2(const QString &texName)
{
    QFileInfo fi(texName);
    const QString svgName(QString("%2/gantt_%1.svg").arg(fi.baseName()).arg(fi.absolutePath()));

    save2(svgName);

    /*convert svg to pdf using incscape
    const QString pdfName(tr("gantt_%1.pdf").arg(name));
    QStringList args;
    args << "-z" << "-f" << svgName << "--export-latex" << "--export-pdf" << tr("output/%1").arg(pdfName) << "-D";
    run("inkscape", args);
*/
    QString s;
    s =     "\n%Tabela danych\n\n"
            "\t\\begin{table}[htb]\n"
            "\t\t\\centering\n"
            "\t\t\\caption{Struktura zlecenia}\n"
            "\t\t\\begin{tabular}{ | r | c | c | c | c | l | }\n"
            "\t\t\\hline\n"
            "\t\tj\t& \\(r_j\\)\t& \\(d_j\\)\t& \\(\\alpha\\)\t& \\(\\beta\\)\t& Operacje zadnia\t\\\\ \\hline\n";

    for(const Job& job : Jobshop::instance()->jobs())
    {
        s += QString("\t\t%1\t& %2\t& %3\t& %4\t& %5\t& %6\t\\\\ \\hline\n")
                .arg(job.id())
                .arg(job.arrival())
                .arg(job.dueDate())
                .arg(job.alpha())
                .arg(job.beta())
                .arg(job.printCompact());
    }
    s +=    "\t\t\\end{tabular}\n"
            "\t\\end{table}\n"
            "\n"
            "%Tabela wynikowa\n\n"
            "\t\\begin{table}[htb]\n"
            "\t\t\\centering\n"
            "\t\t\\caption{Parametry wykonanych zadań}\n"
            "\t\t\\begin{tabular}{ | r | c | c | c | c |}\n"
            "\t\t\\hline\n"
            "\t\tj\t& \\(c_j\\)\t& \\(f_j\\)\t& \\(l_j\\)\t& \\(e_j\\)\t\\\\ \\hline\n";

    for(const Result& result : m_chromosome.results())
    {
        s += QString("\t\t%1\t& %2\t& %3\t& %4\t& %5\t\\\\ \\hline\n")
                .arg(result.jobID())
                .arg(result.completionTime())
                .arg(result.flow())
                .arg(result.lateness())
                .arg(result.earliness());
    }

    s +=    "\t\t\\end{tabular}\n"
            "\t\\end{table}\n"
            "\n"
            "%Tabela wyznacznikow\n\n"
            "\t\\begin{table}[htb]\n"
            "\t\t\\centering\n"
            "\t\t\\begin{tabular}{ l l l }\n";

    s +=    QString(
                "\t\t\\(C_{max} = %1 \\)\t& \\( T_{max} = %3 \\)\t& \\( \\sqrt{\\sum e_j^2 + \\sum l_j^2} = %5 \\)\t\\\\\n"
                "\t\t\\( \\bar{F} = %2 \\)\t& \\( \\bar{T} = %4 \\)\t& \\( \\sum \\alpha * e_j + \\sum \\beta * l_j = %6 \\)\t\\\\\n"
                )
            //\\bar{T} = %4
            .arg(m_chromosome.completionTime())
            .arg(m_chromosome.meanFlow())
            .arg(m_chromosome.maxTardy())
            .arg(m_chromosome.meanTardy())
            .arg(m_chromosome.valueMean())
            .arg(m_chromosome.valueAlpha());

    s +=    "\t\t\\end{tabular}\n"
            "\t\\end{table}\n";
/*
    s +=    "%wykres gantt'a\n"
           "\t\\begin{figure}[htb]\n"
           "\t\t\\centering\n"
           "\t\t\\def\\svgwidth{\\columnwidth}\n"
           "\t\t\\input{";
    s +=    pdfName + "_tex}\n"
            "\t\t\\caption{Wykres Gantt'a}\n"
            "\t\\end{figure}\n"
            "\t\\FloatBarrier\n";
*/
    save(texName, s);
}

void ResultWindow::saveChart()
{
    QString fileName;
    fileName = QFileDialog::getSaveFileName(this, tr("Export chart to file"), "", tr("Scalable Vector Graphics (*.svg)"));
    if(fileName.isEmpty())return;
    this->save2(fileName);
}

void ResultWindow::save2(const QString &filename)
{
    QSvgGenerator svgGen;
    svgGen.setFileName(filename);
    QRectF r = m_scene->sceneRect();
    qDebug() << "image size:" << r << r.size().toSize();
    svgGen.setSize(r.size().toSize());
    svgGen.setViewBox(r);
    svgGen.setTitle(tr("Gantt chart"));
    svgGen.setDescription(tr("Gantt chart"));
    QPainter painter;
    painter.begin(&svgGen);
    m_scene->render(&painter);
    painter.end();
}
